#!/usr/bin/ruby
# frozen_string_literal: true

unless Dir.exist?('data') || ARGV[0] == 'new'
  target = 'customers'
  Dir.glob('*').reject { |f| File.symlink?(f) }
    .find { |f| File.directory?("#{f}/data/#{target}") }.tap do |d|
    abort "No valid data directory, exit..." if d.nil?

    Dir.chdir(d)
  end
end

require 'date'
require 'optparse'
require 'luca_deal'

class LucaCmd
  class Customer < LucaCmd
    def self.create(args = nil, params = {})
      if args
        id = LucaDeal::Customer.create(name: args[0])
        puts "Successfully generated Customer  #{id}" if id
        puts 'Edit customer detail.' if id
      else
        puts 'requires customer\'s name. exit'
        exit 1
      end
    end

    def self.describe(args = nil, params = {})
      if args.empty?
        list = LucaDeal::Customer.id_completion('')
        puts 'requires customer\'s id. exit'
        list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
        exit 1
      else
        list = LucaDeal::Customer.id_completion(args[0])
        case list.length
        when 1
          render(LucaDeal::Customer.new.describe(list.first), params)
        else
          puts 'found multiple contract id. exit'
          list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
          exit 1
        end
      end
    end

    def self.delete(args = nil, params = {})
      if args.empty?
        list = LucaDeal::Customer.id_completion('')
        puts 'requires customer\'s id. exit'
        list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
        exit 1
      else
        list = LucaDeal::Customer.id_completion(args[0])
        case list.length
        when 1
          id = LucaDeal::Customer.delete(list.first)
        else
          puts 'found multiple customer\'s id. exit'
          list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
          exit 1
        end
      end
    end

    def self.list(args = nil, params = {})
      params[:col_order] = %w(name address id)
      render(LucaDeal::Customer.new.list_name, params)
    end
  end

  class Contract < LucaCmd
    def self.create(args = nil, params = {})
      if args.empty?
        list = LucaDeal::Customer.id_completion('')
        puts 'requires customer\'s id. exit'
        list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
        exit 1
      else
        list = LucaDeal::Customer.id_completion(args[0])
        case list.length
        when 1
          id = LucaDeal::Contract.new.generate!(list.first, params['category'])
          puts "Successfully generated Contract  #{id}" if id
          puts 'Conditions are tentative. Edit contract detail.' if id
        else
          puts 'found multiple customer\'s id. exit'
          list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
          exit 1
        end
      end
    end

    def self.describe(args = nil, params = {})
      if args.empty?
        list = LucaDeal::Contract.id_completion('', label: 'customer_name')
        puts 'requires contract id. exit'
        list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
        exit 1
      else
        list = LucaDeal::Contract.id_completion(args[0])
        case list.length
        when 1
          render(LucaDeal::Contract.new.describe(list.first), params)
        else
          puts 'found multiple contract id. exit'
          list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
          exit 1
        end
      end
    end

    def self.delete(args = nil, params = {})
      if args.empty?
        list = LucaDeal::Contract.id_completion('', label: 'customer_name')
        puts 'requires contract id. exit'
        list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
        exit 1
      else
        list = LucaDeal::Contract.id_completion(args[0])
        case list.length
        when 1
          id = LucaDeal::Contract.delete(list.first)
        else
          puts 'found multiple contract id. exit'
          list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
          exit 1
        end
      end
    end
  end

  class Invoice < LucaCmd
    def self.create(args = nil, params = {})
      case params[:mode]
      when 'monthly'
        date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
        LucaDeal::Invoice.new(date).monthly_invoice
        LucaDeal::NoInvoice.new(date).monthly_invoice
        LucaDeal::Fee.new(date).monthly_fee if params[:fee]
        if params[:mail]
          LucaDeal::Invoice.new(date).stats_email(3, mode: 'full')
        end
      else
        date = "#{args[1]}-#{args[2]}-#{args[3] || '1'}" if !args.empty?
        list = LucaDeal::Contract.id_completion(args[0] || '', label: 'customer_name')
        if args.length != 3
          puts 'requires contract id & year month. exit'
          list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
          exit 1
        else
          case list.length
          when 1
            id = LucaDeal::Invoice.new(date).single_invoice(list.first)
          else
            puts 'found multiple contract id. exit'
            list.each { |item| puts "  #{item[:id]}  #{item[:label]}" }
            exit 1
          end
        end
      end
    end

    def self.delete(args = nil, params = {})
      if args
        id = LucaDeal::Invoice.delete(args[0])
      else
        puts 'requires contract id. exit'
        exit 1
      end
    end

    def self.export(args = nil, _params = nil)
      if args
        args << 28 if args.length == 2 # specify safe last day
        LucaDeal::Invoice.new(args.join('-')).export_json
      else
        LucaDeal::Invoice.new.export_json
      end
    end

    def self.list(args = nil, params = {})
      date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
      if args.empty?
        date = "#{Date.today.year}-#{Date.today.month}-1"
        count = 3
      end
      if params[:mail]
        LucaDeal::Invoice.new(date).stats_email(3, mode: params[:mode])
      else
        render(LucaDeal::Invoice.new(date).stats(count || 1, mode: params[:mode]), params)
      end
    end

    def self.report(args = nil, params = {})
      date = Date.new(args[0].to_i, args[1].to_i, 1)
      render(LucaDeal::Invoice.report(date, detail: params[:detail], due: params[:due]), params)
    end

    def self.mail(args = nil, params = {})
      date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
      case params['mode']
      when 'preview'
        LucaDeal::Invoice.new(date).preview_mail
      else
        LucaDeal::Invoice.new(date).deliver_mail
      end
    end

    def self.print(args = nil, params = {})
      if args.length >= 2
        date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
        LucaDeal::Invoice.new(date).print(nil, params)
      else
        date = "#{Date.today.year}-#{Date.today.month}-#{Date.today.day}"
        LucaDeal::Invoice.new(date).print(args[0], params)
      end
    end

    def self.settle(args = nil, params = nil)
      str = args[0].nil? ? STDIN.read : File.read(args[0])
      LucaDeal::Invoice.settle(str, params[:term])
    end
  end

  class Fee < LucaCmd
    def self.create(args = nil, params = {})
      case params[:mode]
      when 'monthly'
        date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
        LucaDeal::Fee.new(date).monthly_fee
      else
        puts "not implemented yet"
        exit 1
      end
    end

    def self.delete(args = nil, params = {})
      if args
        id = LucaDeal::Fee.delete(args[0])
      else
        puts 'requires contract id. exit'
        exit 1
      end
    end

    def self.export(args = nil, _params = nil)
      if args
        args << 28 if args.length == 2 # specify safe last day
        LucaDeal::Fee.new(args.join('-')).export_json
      else
        LucaDeal::Fee.new.export_json
      end
    end

    def self.list(args = nil, params = {})
      date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
      if args.empty?
        date = "#{Date.today.year}-#{Date.today.month}-1"
        count = 3
      end
      if params[:html]
        LucaDeal::Fee.new(date).preview_stdout
      else
        render(LucaDeal::Fee.new(date).stats(count || 1), params)
      end
    end

    def self.mail(args = nil, params = {})
      date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
      case params['mode']
      when 'preview'
        LucaDeal::Fee.new(date).preview_mail
      else
        LucaDeal::Fee.new(date).deliver_mail
      end
    end
  end

  def self.render(dat, params)
    case params[:output]
    when 'json'
      puts JSON.dump(dat)
    when 'nu'
      LucaSupport::View.nushell(dat, :expand, params[:col_order] || [])
    when 'explore'
      LucaSupport::View.nushell(dat, :explore)
    when 'csv'
      str = CSV.generate(String.new, col_sep: "\t") do |row|
        row << dat.first.keys
        dat.each { |d| row << d.values }
      end
      puts str
    else
      puts YAML.dump(dat)
    end
  end
end

def new_pj(args = nil, params = {})
  LucaDeal::Setup.create_project args[0]
end

LucaRecord::Base.valid_project?
cmd = ARGV.shift
params = {}

case cmd
when /customers?/
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal customers create CustomerName'
      args = opt.parse(ARGV)
      LucaCmd::Customer.create(args, params)
    end
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal customers list [options]'
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('--explore', 'explore table in nushell') { |_v| params[:output] = 'explore' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      args = opt.parse(ARGV)
      LucaCmd::Customer.list(args, params)
    end
  when 'describe'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal customers describe [options] customer_id'
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      args = opt.parse(ARGV)
      LucaCmd::Customer.describe(args, params)
    end
  when 'delete'
    LucaCmd::Customer.delete(ARGV)
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-deal customer[s] subcommands [--help|options]'
    puts '  create'
    puts '  list'
    puts '  describe: show customer with contracts info'
    puts '  delete'
    exit 1
  end
when /contracts?/
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal contracts create [options] CustomerId'
      opt.on('--salesfee', 'create contract as sales fee definition') do |_v|
        params['category'] = 'sales_fee'
      end
      args = opt.parse(ARGV)
      LucaCmd::Contract.create(args, params)
    end
  when 'describe'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal contracts describe [options] customer_id'
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      args = opt.parse(ARGV)
      LucaCmd::Contract.describe(args, params)
    end
  when 'delete'
    LucaCmd::Contract.delete(ARGV)
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-deal contract[s] subcommand [--help|options]'
    puts '  create'
    puts '  describe: show contract with puroducts or items info'
    puts '  delete'
    exit 1
  end
when 'export'
  LucaCmd::Invoice.export(ARGV)
when /invoices?/, 'i'
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices create [options] --monthly|contract_id year month [date]'
      opt.on('--mail', 'send payment list by email. Only works with --monthly') { |_v| params[:mail] = true }
      opt.on('--monthly', 'generate monthly data') { |_v| params[:mode] = 'monthly' }
      opt.on('--with-fee', 'generate sales fee data after monthly invoice creation') { |_v| params[:fee] = true }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.create(args, params)
    end
  when 'delete'
    LucaCmd::Invoice.delete(ARGV)
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices list [options] year month [date]'
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('--explore', 'explore table in nushell') { |_v| params[:output] = 'explore' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      opt.on('--mail', 'send payment list by email') { |_v| params[:mail] = true }
      opt.on('--full', 'add settlement info') { |_v| params[:mode] = 'full' }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.list(args, params)
    end
  when 'mail'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices mail [options] year month [date]'
      opt.on('--preview', 'send to preview user') { |_v| params['mode'] = 'preview' }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.mail(args, params)
    end
  when 'print'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices print [options] <invoice_id | year month>'
      opt.on('--pdf', 'output PDF invoices. wkhtmlpdf is required') { |_v| params[:output] = :pdf }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.print(args, params)
    end
  when 'settle'
    params[:term] = 1
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices settle [filepath]'
      opt.on('--search-term VAL', 'search invoice N months before payment date. default: 1') { |v| params[:term] = v.to_i }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.settle(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-deal invoices subcommand [--help|options]'
    puts '  create'
    puts '  delete'
    puts '  list'
    puts '  mail: send mail with invoice'
    puts '  print: render invoices into HTML/PDF'
    puts '  settle'
    exit 1
  end
when /reports?/, 'r'
  subcmd = ARGV.shift
  case subcmd
  when 'balance'
    params[:detail] = false
    params[:due] = false
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal r[eports] balance [options] [year month]'
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('--explore', 'explore table in nushell') { |_v| params[:output] = 'explore' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      opt.on('--detail', 'show detail info') { |_v| params[:detail] = true }
      opt.on('--force-due', 'respect due date over actual payment') { |_v| params[:due] = true }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.report(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-deal r[eports] subcommand [--help|options]'
    puts '  balance'
    exit 1
  end
when 'new'
  params = {}
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-deal new DIR'
    args = opt.parse(ARGV)
    new_pj(args, params)
  end
when /fee/
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal fee create [options] year month [date]'
      opt.on('--monthly', 'generate monthly data') { |_v| params[:mode] = 'monthly' }
      args = opt.parse(ARGV)
      LucaCmd::Fee.create(args, params)
    end
  when 'delete'
    LucaCmd::Fee.delete(ARGV)
  when 'export'
    LucaCmd::Fee.export(ARGV)
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal fee list [options] year month [date]'
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('--explore', 'explore table in nushell') { |_v| params[:output] = 'explore' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      opt.on('--html', 'output html invoices') { |_v| params[:html] = 'monthly' }
      args = opt.parse(ARGV)
      LucaCmd::Fee.list(args, params)
    end
  when 'mail'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal fee mail [options] year month [date]'
      opt.on('--preview', 'send to preview user') { |_v| params['mode'] = 'preview' }
      args = opt.parse(ARGV)
      LucaCmd::Fee.mail(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-deal fee subcommand [--help|options]'
    puts '  create'
    puts '  delete'
    puts '  list'
    puts '  mail: send mail with report'
    exit 1
  end
else
  puts 'Proper subcommand needed.'
  puts
  puts 'Usage: luca-deal subcommand [options]'
  puts '        customers'
  puts '        contracts'
  puts '        i[nvoices]'
  puts '        fee'
  puts '        r[eports]'
  puts '        new: initialize project dir'
  puts '        export: puts invoice data for LucaBook import'
  exit 1
end
