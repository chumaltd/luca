#!/usr/bin/ruby
# frozen_string_literal: true

require 'date'
require 'optparse'
require 'luca_deal'

module LucaCmd
  class Customer
    def self.create(args = nil, params = {})
      if args
        id = LucaDeal::Customer.create(name: args[0])
        puts "Successfully generated Customer  #{id}" if id
        puts 'Edit customer detail.' if id
      else
        puts 'requires customer\'s name. exit'
        exit 1
      end
    end

    def self.delete(args = nil, params = {})
      if args
        id = LucaDeal::Customer.delete(args[0])
      else
        puts 'requires customer\'s id. exit'
        exit 1
      end
    end

    def self.list(args = nil, params = {})
      LucaDeal::Customer.new.list_name
    end
  end

  class Contract
    def self.create(args = nil, params = {})
      if args
        id = LucaDeal::Contract.new.generate!(args[0], params['category'])
        puts "Successfully generated Contract  #{id}" if id
        puts 'Conditions are tentative. Edit contract detail.' if id
      else
        puts 'requires customer\'s id. exit'
        exit 1
      end
    end

    def self.delete(args = nil, params = {})
      if args
        id = LucaDeal::Contract.delete(args[0])
      else
        puts 'requires contract id. exit'
        exit 1
      end
    end
  end

  class Invoice
    def self.create(args = nil, params = {})
      date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
      case params['mode']
      when 'monthly'
        LucaDeal::Invoice.new(date).monthly_invoice
      else
        puts 'not implemented mode'
      end
    end

    def self.delete(args = nil, params = {})
      if args
        id = LucaDeal::Invoice.delete(args[0])
      else
        puts 'requires contract id. exit'
        exit 1
      end
    end

    def self.export(args = nil, _params = nil)
      if args
        args << 28 if args.length == 2 # specify safe last day
        LucaDeal::Invoice.new(args.join('-')).export_json
      else
        LucaDeal::Invoice.new.export_json
      end
    end

    def self.list(args = nil, params = {})
      date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
      if args.empty?
        date = "#{Date.today.year}-#{Date.today.month}-1"
        count = 3
      end
      LucaDeal::Invoice.new(date).stats(count || 1)
    end

    def self.mail(args = nil, params = {})
      date = "#{args[0]}-#{args[1]}-#{args[2] || '1'}" if !args.empty?
      case params['mode']
      when 'preview'
        LucaDeal::Invoice.new(date).preview_mail
      else
        LucaDeal::Invoice.new(date).deliver_mail
      end
    end
  end
end

def new_pj(args = nil, params = {})
  LucaDeal::Setup.create_project args[0]
end

LucaRecord::Base.valid_project?
cmd = ARGV.shift
params = {}

case cmd
when /customers?/
  subcmd = ARGV.shift
  case subcmd
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal customers list [options]'
      args = opt.parse(ARGV)
      LucaCmd::Customer.list(args, params)
    end
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal customers create CustomerName'
      args = opt.parse(ARGV)
      LucaCmd::Customer.create(args, params)
    end
  when 'delete'
    LucaCmd::Customer.delete(ARGV)
  else
    puts 'Usage: luca-deal customers sub-commands'
  end
when /contracts?/
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal contracts create [options] CustomerId'
      opt.on('--salesfee', 'create contract as sales fee definition') do |_v|
        params['category'] = 'sales_fee'
      end
      args = opt.parse(ARGV)
      LucaCmd::Contract.create(args, params)
    end
  when 'delete'
    LucaCmd::Contract.delete(ARGV)
  else
    puts 'Usage: luca-deal contracts Subcommand'
  end
when 'export'
  LucaCmd::Invoice.export(ARGV)
when /invoices?/, 'i'
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices create [options] year month [date]'
      opt.on('--monthly', 'generate monthly data') { |v| params['mode'] = 'monthly' }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.create(args, params)
    end
  when 'delete'
    LucaCmd::Invoice.delete(ARGV)
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices list [options] year month [date]'
      args = opt.parse(ARGV)
      LucaCmd::Invoice.list(args, params)
    end
  when 'mail'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-deal invoices mail [options] year month [date]'
      opt.on('--preview', 'send to preview user') { |v| params['mode'] = 'preview' }
      args = opt.parse(ARGV)
      LucaCmd::Invoice.mail(args, params)
    end
  else
    puts 'Usage: luca-deal invoices SubCommand'
  end
when 'new'
  params = {}
  OptionParser.new do |opt|
    args = opt.parse(ARGV)
    new_pj(args, params)
  end
else
  puts 'Usage: luca-deal sub-command [--help|options]'
  puts '        customers'
  puts '        contracts'
  puts '        invoices'
  puts '        export'
end
