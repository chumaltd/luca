#!/usr/bin/ruby

require 'json'
require 'optparse'
require 'luca_book'

class LucaCmd
  class Journal < LucaCmd
    def self.import(args, params)
      if params['config']
        LucaBook::Import.new(args[0], params['config']).import_csv
      elsif params['json']
        str = args[0].nil? ? STDIN.read : File.read(args[0])
        LucaBook::Import.import_json(str)
      else
        puts 'Usage: luca-book import -c import_config'
        exit 1
      end
    end

    def self.list(args, params)
      args = gen_range(params[:n]) if args.empty?
      params[:col_order] = %w(date diff balance counter_code note code id no)
      if params['code']
        if params['headers']
          render(LucaBook::ListByHeader.term(*args, code: params['code'], header: params['headers']).list_by_code, params)
        else
          render(LucaBook::List.term(*args, code: params['code'], recursive: params[:recursive]).list_by_code(params[:recursive]), params)
        end
      elsif params['render']
        puts LucaBook::List.term(*args).render_html(params['render'])
      else
        render(LucaBook::List.term(*args).list_journals, params)
      end
    end

    def self.stats(args, params)
      args = gen_range(params[:n]) if args.empty?
      if params['code']
        render(LucaBook::State.by_code(params['code'], *args, recursive: params[:recursive]), params)
      else
        render(LucaBook::State.range(*args).stats(params[:level]), params)
      end
    end

    def self.add_header(args, params)
      args = gen_range(params[:n] || 1) if args.empty?
      if params['code']
        LucaBook::List.add_header(*args, code: params['code'], header_key: params[:key], header_val: params[:value])
      else
        puts 'no code specified.'
      end
    end
  end

  class Report < LucaCmd
    def self.xbrl(args, params)
      level = params[:level] || 3
      legal = params[:legal] || false
      range = case args.length
              when 4
                args
              when 2
                date = Date.new(args[0].to_i, args[1].to_i)
                r = LucaBook::Util.current_fy(date, to: date)
                [r[0].year, r[0].month, r[1].year, r[1].month]
              when 0
                if params[:n]
                  gen_range(params[:n])
                else
                  date = params[:lastyear] ? Date.today.prev_year : Date.today
                  r = LucaBook::Util.current_fy(date)
                  [r[0].year, r[0].month, r[1].year, r[1].month]
                end
              end
      LucaBook::State.range(*range).render_xbrl(params[:output])
    end

    def self.balancesheet(args, params)
      level = params[:level] || 3
      legal = params[:legal] || false
      render(LucaBook::State.range(*parse_range_args(args, params)).bs(level, legal: legal), params)
    end

    def self.profitloss(args, params)
      level = params[:level] || 2
      render(LucaBook::State.range(*parse_range_args(args, params)).pl(level), params)
    end

    def self.report_mail(args, params)
      level = params[:level] || 3
      render(LucaBook::State.range(*parse_range_args(args, params)).report_mail(level), params)
    end
  end

  def self.parse_range_args(args, params)
    case args.length
    when 4
      args
    when 2
      if params[:financialyear]
        date = Date.new(args[0].to_i, args[1].to_i)
        r = LucaBook::Util.current_fy(date, to: date)
        [r[0].year, r[0].month, r[1].year, r[1].month]
      else
        args
      end
    when 0
      if params[:n]
        gen_range(params[:n])
      elsif params[:financialyear]
        date = Date.today
        r = LucaBook::Util.current_fy(date)
        [r[0].year, r[0].month, date.year, date.month]
      else
        [Date.today.year, Date.today.month]
      end
    end
  end

  def self.gen_range(count = nil)
    today = Date.today
    if count
      start = today.prev_month(count - 1)
      [start.year, start.month, today.year, today.month]
    else
      start_year = if today.month >= LucaSupport::CONFIG['fy_start'].to_i
                     today.year
                   else
                     today.year - 1
                   end
      [start_year, LucaSupport::CONFIG['fy_start'], start_year + 1, LucaSupport::CONFIG['fy_start'].to_i - 1]
    end
  end

  def self.render(dat, params)
    case params[:output]
    when 'json'
      puts JSON.dump(dat)
    when 'nu'
      if dat.length == 1 and dat.first['balance'] == 0
        puts 'â“˜ Initial balance & records empty in the specified term.'
      else
        LucaSupport::View.nushell(dat, params[:col_order] || [])
      end
    else
      puts YAML.dump(dat)
    end
  end

  class Dict < LucaCmd
    def self.update_balance(args, params)
      LucaBook::Dict.generate_balance(*args)
    end

    def self.export_balance(args, params)
      date = Date.new(args[0].to_i, args[1].to_i, args[2].to_i)
      LucaBook::Dict.export_balance(date)
    end
  end
end

def new_pj(args = nil, params = {})
  LucaBook::Setup.create_project params['country'], args[0]
end

LucaRecord::Base.valid_project?
cmd = ARGV.shift
params = {}

case cmd
when /journals?/, 'j'
  subcmd = ARGV.shift
  case subcmd
  when 'import'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals import [options] filepath'
      opt.on('-c', '--config VAL', 'import definition'){ |v| params['config'] = v }
      opt.on('-j', '--json', 'import via json format'){ |_v| params['json'] = true }
      args = opt.parse!(ARGV)
      LucaCmd::Journal.import(args, params)
    end
  when 'list'
    params[:recursive] = false
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals list [options] [YYYY M]'
      opt.on('-c', '--code VAL', 'filter with code or label') { |v| params['code'] = v }
      opt.on('-r', '--recursive', 'include subaccounts') { |_v| params[:recursive] = true }
      opt.on('--customer', 'categorize by x-customer header') { |_v| params['headers'] = 'x-customer' }
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      opt.on('--html', 'output journals html') { |_v| params['render'] = :html }
      opt.on('--pdf', 'output journals PDF') { |_v| params['render'] = :pdf }
      opt.on_tail('List records. If you specify code and/or month, search on each criteria.')
      args = opt.parse!(ARGV)
      LucaCmd::Journal.list(args, params)
    end
  when 'set'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals set [options] [YYYY M]'
      opt.on('-c', '--code VAL', 'search with code') { |v| params['code'] = v }
      opt.on('--header VAL', 'header key') { |v| params[:key] = v }
      opt.on('--val VAL', 'header value') { |v| params[:value] = v }
      opt.on_tail('set header to journals on specified code.')
      args = opt.parse!(ARGV)
      LucaCmd::Journal.add_header(args, params)
    end
  when 'stats'
    params[:recursive] = false
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals stats [options] [YYYY M]'
      opt.on('-c', '--code VAL', 'filter with code or label') { |v| params['code'] = v }
      opt.on('-r', '--recursive', 'include subaccounts') { |_v| params[:recursive] = true }
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      args = opt.parse!(ARGV)
      LucaCmd::Journal.stats(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-book (j|journal[s]) subcommand [options] [YYYY M YYYY M]'
    puts '  import: import journals from JSON/TSV'
    puts '  list: list journals'
    puts '  stats: list account statistics'
    exit 1
  end
when 'new'
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-book new [options] Dir'
    opt.on('-c', '--country VAL', 'specify country code') { |v| params['coountry'] = v }
    args = opt.parse(ARGV)
    new_pj(args, params)
  end
when /reports?/, 'r'
  subcmd = ARGV.shift
  case subcmd
  when 'xbrl'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book r[eports] xbrl [options] [YYYY M]'
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      opt.on('-o VAL', '--output VAL', 'specify file name') { |v| params[:output] = v }
      opt.on('--lastyear', 'report last Financial Year') { |_v| params[:lastyear] = true }
      args = opt.parse!(ARGV)
      LucaCmd::Report.xbrl(args, params)
    end
  when 'bs'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book r[eports] bs [options] [YYYY M]'
      opt.on('-l', '--level VAL', 'account level') { |v| params[:level] = v.to_i }
      opt.on('--fy', 'adjust start date to Financial Year') { |_v| params[:financialyear] = true }
      opt.on('--legal', 'show legal mandatory account') { |_v| params[:legal] = true }
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      args = opt.parse!(ARGV)
      LucaCmd::Report.balancesheet(args, params)
    end
  when 'pl'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book r[eports] pl [options] [YYYY M YYYY M]'
      opt.on('-l', '--level VAL', 'account level') { |v| params[:level] = v.to_i }
      opt.on('--fy', 'adjust start date to Financial Year') { |_v| params[:financialyear] = true }
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      opt.on('-o', '--output VAL', 'output serialized data') { |v| params[:output] = v }
      args = opt.parse!(ARGV)
      LucaCmd::Report.profitloss(args, params)
    end
  when 'mail'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book r[eports] mail [options] [YYYY M YYYY M]'
      opt.on('-l', '--level VAL', 'account level') { |v| params[:level] = v.to_i }
      opt.on('--fy', 'adjust start date to Financial Year') { |_v| params[:financialyear] = true }
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      args = opt.parse!(ARGV)
      LucaCmd::Report.report_mail(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-book (r|report[s]) (bs|pl|mail|xbrl) [options] YYYY M'
    puts '  bs: show balance sheet'
    puts '  pl: show statement of income'
    puts '  mail: send BS/PL via email'
    puts '  xbrl: render XBRL report'
    exit 1
  end
when /balance/
  subcmd = ARGV.shift
  case subcmd
  when 'update'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book balance update YYYY [M]'
      args = opt.parse!(ARGV)
      LucaCmd::Dict.update_balance(args, params)
    end
  when 'export'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book balance export YYYY M d'
      args = opt.parse!(ARGV)
      LucaCmd::Dict.export_balance(args, params)
    end
  end
else
  puts 'Proper subcommand needed.'
  puts
  puts 'Usage: luca-book (j[ournals]|r[eports]) subcommand'
  puts '  journals: operate journal records'
  puts '  reports: show reports'
  puts '  balance update: generate accumulated balance'
  exit 1
end
