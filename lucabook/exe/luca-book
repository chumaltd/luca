#!/usr/bin/ruby

require 'optparse'
require 'luca_book'

module LucaCmd
  class Journal
    def self.import(args, params)
      if params['config']
        LucaBook::Import.new(args[0], params['config']).import_csv
      elsif params['json']
        LucaBook::Import.import_json(STDIN.read)
      else
        puts 'Usage: luca-book import -c import_config'
      end
    end

    def self.list(args, params)
      if params['code']
        LucaBook::List.term(*args, code: params['code']).list_on_code.to_yaml
      elsif args.length > 0
        LucaBook::List.term(*args).list_journals.to_yaml
      else
        # TODO: define default function
      end
    end
  end

  class Report
    def self.balancesheet(args, params)
      LucaBook::State.term(*args).bs #.to_yaml
    end

    def self.profitloss(args, params)
      LucaBook::State.term(*args).pl.to_yaml
    end
  end
end

def new_pj(args = nil, params = {})
  LucaBook::Setup.create_project params['country'], args[0]
end

LucaRecord::Base.valid_project?
cmd = ARGV.shift
params = {}

case cmd
when /journals?/, 'j'
  subcmd = ARGV.shift
  case subcmd
  when 'import'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals import filepath'
      opt.on('-c', '--config VAL', 'import definition'){|v| params['config'] = v }
      opt.on('-j', '--json', 'import via json format'){|_v| params['json'] = true }
      args = opt.parse!(ARGV)
      LucaCmd::Journal.import(args, params)
    end
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals list [year month]'
      opt.on('-c', '--code VAL', 'search with code') { |v| params['code'] = v }
      opt.on_tail('List records. If you specify code and/or month, search on each criteria.')
      args = opt.parse!(ARGV)
      LucaCmd::Journal.list(args, params)
    end
  end
when 'new'
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-book new Dir'
    opt.on('-c', '--country VAL', 'specify country code') { |v| params['coountry'] = v }
    args = opt.parse(ARGV)
    new_pj(args, params)
  end
when /reports?/, 'r'
  subcmd = ARGV.shift
  case subcmd
  when 'bs'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book reports bs'
      args = opt.parse!(ARGV)
      LucaCmd::Report.balancesheet(args, params)
    end
  when 'pl'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book reports pl'
      args = opt.parse!(ARGV)
      LucaCmd::Report.profitloss(args, params)
    end
  end
when '--help'
  puts 'Usage: luca-book subcommand'
  puts '  journals: operate journal records'
  puts '  reports: show reports'
else
  puts 'Invalid subcommand'
end
