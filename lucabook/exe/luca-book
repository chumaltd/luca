#!/usr/bin/ruby

require 'optparse'
require 'luca_book'

module LucaCmd
  class Journal
    def self.import(args, params)
      if params['config']
        LucaBook::Import.new(args[0], params['config']).import_csv
      elsif params['json']
        LucaBook::Import.import_json(STDIN.read)
      else
        puts 'Usage: luca-book import -c import_config'
        exit 1
      end
    end

    def self.list(args, params)
      args = LucaCmd.gen_range(params[:n] || 1) if args.empty?
      if params['code']
        LucaBook::List.term(*args, code: params['code']).list_on_code.to_yaml
      else
        LucaBook::List.term(*args).list_journals.to_yaml
      end
    end

    def self.stats(args, params)
      args = LucaCmd.gen_range(params[:n]) if args.empty?
      LucaBook::State.term(*args).stats(params[:level])
    end
  end

  class Report
    def self.balancesheet(args, params)
      level = params[:level] || 3
      legal = params[:legal] || false
      args = LucaCmd.gen_range(params[:n] || 1) if args.empty?
      LucaBook::State.term(*args).bs(level, legal: legal)
    end

    def self.profitloss(args, params)
      level = params[:level] || 2
      args = LucaCmd.gen_range(params[:n]) if args.empty?
      LucaBook::State.term(*args).pl(level).to_yaml
    end
  end

  module_function

  def gen_range(count)
    count ||= 3
    today = Date.today
    start = today.prev_month(count - 1)
    [start.year, start.month, today.year, today.month]
  end
end

def new_pj(args = nil, params = {})
  LucaBook::Setup.create_project params['country'], args[0]
end

LucaRecord::Base.valid_project?
cmd = ARGV.shift
params = {}

case cmd
when /journals?/, 'j'
  subcmd = ARGV.shift
  case subcmd
  when 'import'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals import [options] filepath'
      opt.on('-c', '--config VAL', 'import definition'){ |v| params['config'] = v }
      opt.on('-j', '--json', 'import via json format'){ |_v| params['json'] = true }
      args = opt.parse!(ARGV)
      LucaCmd::Journal.import(args, params)
    end
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals list [options] [YYYY M]'
      opt.on('-c', '--code VAL', 'search with code') { |v| params['code'] = v }
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      opt.on_tail('List records. If you specify code and/or month, search on each criteria.')
      args = opt.parse!(ARGV)
      LucaCmd::Journal.list(args, params)
    end
  when 'stats'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book journals stats [options] [YYYY M]'
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      args = opt.parse!(ARGV)
      LucaCmd::Journal.stats(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-book (j|journal[s]) subcommand [options] [YYYY M YYYY M]'
    puts '  import: import journals from JSON/TSV'
    puts '  list: list journals'
    puts '  stats: list account statistics'
    exit 1
  end
when 'new'
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-book new [options] Dir'
    opt.on('-c', '--country VAL', 'specify country code') { |v| params['coountry'] = v }
    args = opt.parse(ARGV)
    new_pj(args, params)
  end
when /reports?/, 'r'
  subcmd = ARGV.shift
  case subcmd
  when 'bs'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book reports bs [options] [YYYY M]'
      opt.on('-l', '--level VAL', 'account level') { |v| params[:level] = v.to_i }
      opt.on('--legal', 'show legal mandatory account') { |_v| params[:legal] = true }
      args = opt.parse!(ARGV)
      LucaCmd::Report.balancesheet(args, params)
    end
  when 'pl'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-book reports pl [options] [YYYY M YYYY M]'
      opt.on('-l', '--level VAL', 'account level') { |v| params[:level] = v.to_i }
      opt.on('-n VAL', 'report count') { |v| params[:n] = v.to_i }
      args = opt.parse!(ARGV)
      LucaCmd::Report.profitloss(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-book (r|report[s]) (bs|pl) [options] YYYY M'
    puts '  bs: show balance sheet'
    puts '  pl: show statement of income'
    exit 1
  end
else
  puts 'Proper subcommand needed.'
  puts
  puts 'Usage: luca-book (j[ournals]|r[eports]) subcommand'
  puts '  journals: operate journal records'
  puts '  reports: show reports'
  exit 1
end
