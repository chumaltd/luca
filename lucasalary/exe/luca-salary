#!/usr/bin/ruby
# frozen_string_literal: true

require 'json'
require 'optparse'
require 'luca_salary'
require 'luca_salary/monthly'

module LucaCmd
  class Profile
    def self.create(args = nil, _params = nil)
      LucaSalary::Profile.gen_profile!(args.first)
    end
  end

  class Payment
    def self.create(args = nil, _params = nil)
      if args
        args << 28 if args.length == 2 # specify safe last day
        LucaSalary::Monthly.new(args.join('-')).calc
      else
        LucaSalary::Monthly.new.calc
      end
    end

    def self.export(args = nil, _params = nil)
      if args
        args << 28 if args.length == 2 # specify safe last day
        LucaSalary::Payment.new(args.join('-')).export_json
      else
        LucaSalary::Payment.new.export_json
      end
    end

    def self.list(args = nil, params = nil)
      if args
        args << 28 if args.length == 2 # specify safe last day
        LucaSalary::Monthly.new(args.join('-')).report(params.dig('mode'))
      else
        LucaSalary::Monthly.new.report(params.dig('mode'))
      end
    end

    def self.report(args = nil, params = nil)
        render(LucaSalary::State.range(*args).report(), params)
    end

    def self.total(args = nil, params = nil)
      if params['mode'] == 'adjust'
        LucaSalary::Payment.year_adjust(args[0].to_i, args[1].to_i)
      else
        LucaSalary::Payment.year_total(args.first.to_i)
      end
    end

    def self.render(dat, params)
      case params[:output]
      when 'json'
        puts JSON.dump(dat)
      when 'nu'
        LucaSupport::View.nushell(YAML.dump(dat))
      else
        puts YAML.dump(dat)
      end
    end
  end
end

LucaRecord::Base.valid_project?
cmd = ARGV.shift
params = {}

case cmd
when /profiles?/
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-salary profiles create Name'
      args = opt.parse(ARGV)
      LucaCmd::Profile.create(args)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-salary profile[s] create Name'
    exit 1
  end
when 'export'
  LucaCmd::Payment.export(ARGV)
when /payments?/
  subcmd = ARGV.shift
  case subcmd
  when 'create'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-salary payments create year month [date]'
      args = opt.parse(ARGV)
      LucaCmd::Payment.create(args)
    end
  when 'list'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-salary payments list [--mail] year month [date]'
      opt.on('--mail', 'send to managers') { |_v| params['mode'] = 'mail' }
      args = opt.parse(ARGV)
      LucaCmd::Payment.list(args, params)
    end
  when 'report'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-salary payments report [--nu] year month [year month]'
      opt.on('--nu', 'show table in nushell') { |_v| params[:output] = 'nu' }
      args = opt.parse(ARGV)
      LucaCmd::Payment.report(args, params)
    end
  when 'total'
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-salary payments total [--adjust] year [month]'
      opt.on('--adjust', 'Apply year total adjustment to payslip of year/month') { |_v| params['mode'] = 'adjust' }
      args = opt.parse(ARGV)
      LucaCmd::Payment.total(args, params)
    end
  else
    puts 'Proper subcommand needed.'
    puts
    puts 'Usage: luca-salary payment[s] (create|list) [--help|options]'
    exit 1
  end
else
  puts 'Proper subcommand needed.'
  puts
  puts 'Usage: luca-salary subcommand [options]'
  puts '        profiles'
  puts '        payments'
  puts '        export: puts payment data for LucaBook import'
  exit 1
end
